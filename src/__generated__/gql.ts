/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "\n    fragment DocsSidebarMenuItemsFragment on MenuItem {\n      id\n      uri\n      path\n      label\n      parentId\n      cssClasses\n      menu {\n        node {\n          name\n        }\n      }\n    }\n  ": types.DocsSidebarMenuItemsFragmentFragmentDoc,
    "\n    fragment FeaturedImageFragment on NodeWithFeaturedImage {\n      featuredImage {\n        node {\n          id\n          sourceUrl\n          altText\n          mediaDetails {\n            width\n            height\n          }\n        }\n      }\n    }\n  ": types.FeaturedImageFragmentFragmentDoc,
    "\n     fragment FooterMenuItemsFragment on MenuItem {\n       id\n       uri\n       path\n       label\n       parentId\n       cssClasses\n       target\n       menu {\n         node {\n           name\n         }\n       }\n     }\n  ": types.FooterMenuItemsFragmentFragmentDoc,
    "\n    fragment HeaderGeneralSettingsFragment on GeneralSettings {\n      title\n      description\n    }\n  ": types.HeaderGeneralSettingsFragmentFragmentDoc,
    "\n    fragment PrimaryMenuItemsFragment on MenuItem {\n      id\n      uri\n      path\n      label\n      parentId\n      cssClasses\n      target\n      menu {\n        node {\n          name\n        }\n      }\n    }\n  ": types.PrimaryMenuItemsFragmentFragmentDoc,
    "\n    fragment SecondaryMenuItemsFragment on MenuItem {\n      id\n      uri\n      label\n      target\n    }\n  ": types.SecondaryMenuItemsFragmentFragmentDoc,
    "\n    fragment PostsItemFragment on Post {\n      id\n      date\n      uri\n      title\n      excerpt\n      author {\n        node {\n          name\n        }\n      }\n      tags {\n        nodes {\n          id\n          name\n          link\n        }\n      }\n    }\n  ": types.PostsItemFragmentFragmentDoc,
    "\n  query SEARCH_RESULTS($searchTerm: String!) {\n    contentNodes(where: { search: $searchTerm }) {\n      edges {\n        node {\n          id\n          ... on NodeWithTitle {\n            title\n          }\n          uri\n        }\n      }\n    }\n  }\n": types.Search_ResultsDocument,
    "\n  query SEARCH_RESULTS($searchTerm: String!) {\n    contentNodes(where: {search: $searchTerm}) {\n      edges {\n        node {\n          id\n          ... on NodeWithTitle {\n            title\n          }\n          uri\n        }\n      }\n    }\n  }\n": types.Search_ResultsDocument,
    "\nquery Get404Page {\n    generalSettings {\n      title\n      description\n    }\n    primaryMenuItems: menuItems(where: {location: PRIMARY}) {\n      nodes {\n        ...PrimaryMenuItemsFragment\n      }\n    }\n    secondaryMenuItems: menuItems(where: {location: SECONDARY}) {\n      nodes {\n        ...SecondaryMenuItemsFragment\n      }\n    }\n    footer1MenuItems: menuItems(where: {location: FOOTER_1}) {\n      nodes {\n        ...FooterMenuItemsFragment\n      }\n    }\n    footer2MenuItems: menuItems(where: {location: FOOTER_2}) {\n      nodes {\n        ...FooterMenuItemsFragment\n      }\n    }\n    footer3MenuItems: menuItems(where: {location: FOOTER_3}) {\n      nodes {\n        ...FooterMenuItemsFragment\n      }\n    }\n    footer4MenuItems: menuItems(where: {location: FOOTER_4}) {\n      nodes {\n        ...FooterMenuItemsFragment\n      }\n    }\n  }\n": types.Get404PageDocument,
    "\n  query GetPostsPage {\n    posts(first: 100) {\n      edges {\n        node {\n          seo {\n            metaDesc\n            opengraphImage {\n              sourceUrl\n            }\n          }\n        }\n      }\n      nodes {\n        ...PostsItemFragment\n      }\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n    }\n    generalSettings {\n      title\n      description\n    }\n    primaryMenuItems: menuItems(where: { location: PRIMARY }) {\n      nodes {\n        ...PrimaryMenuItemsFragment\n      }\n    }\n    secondaryMenuItems: menuItems(where: { location: SECONDARY }) {\n      nodes {\n        ...SecondaryMenuItemsFragment\n      }\n    }\n    footer1MenuItems: menuItems(where: {location: FOOTER_1}) {\n      nodes {\n        ...FooterMenuItemsFragment\n      }\n    }\n    footer2MenuItems: menuItems(where: {location: FOOTER_2}) {\n      nodes {\n        ...FooterMenuItemsFragment\n      }\n    }\n    footer3MenuItems: menuItems(where: {location: FOOTER_3}) {\n      nodes {\n        ...FooterMenuItemsFragment\n      }\n    }\n    footer4MenuItems: menuItems(where: {location: FOOTER_4}) {\n      nodes {\n        ...FooterMenuItemsFragment\n      }\n    }\n  }\n": types.GetPostsPageDocument,
    "\n  query GetContactFormPage {\n    generalSettings {\n      title\n      description\n    }\n    primaryMenuItems: menuItems(where: { location: PRIMARY }) {\n      nodes {\n        ...PrimaryMenuItemsFragment\n      }\n    }\n    secondaryMenuItems: menuItems(where: { location: SECONDARY }) {\n      nodes {\n        ...SecondaryMenuItemsFragment\n      }\n    }\n    footer1MenuItems: menuItems(where: {location: FOOTER_1}) {\n      nodes {\n        ...FooterMenuItemsFragment\n      }\n    }\n    footer2MenuItems: menuItems(where: {location: FOOTER_2}) {\n      nodes {\n        ...FooterMenuItemsFragment\n      }\n    }\n    footer3MenuItems: menuItems(where: {location: FOOTER_3}) {\n      nodes {\n        ...FooterMenuItemsFragment\n      }\n    }\n    footer4MenuItems: menuItems(where: {location: FOOTER_4}) {\n      nodes {\n        ...FooterMenuItemsFragment\n      }\n    }\n  }\n": types.GetContactFormPageDocument,
    "\n  query GetShowcasesPage {\n    showcases(first: 100) {\n      edges {\n        node {\n          seo {\n            metaDesc\n            opengraphImage {\n              sourceUrl\n            }\n          }\n        }\n      }\n      nodes {\n        id\n        title\n        showcaseFields {\n          externalUrlTitle\n          externalUrl\n        }\n        featuredImage {\n          node {\n            sourceUrl\n          }\n        }\n      }\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n    }\n    generalSettings {\n      title\n      description\n    }\n    primaryMenuItems: menuItems(where: { location: PRIMARY }) {\n      nodes {\n        ...PrimaryMenuItemsFragment\n      }\n    }\n    secondaryMenuItems: menuItems(where: { location: SECONDARY }) {\n      nodes {\n        ...SecondaryMenuItemsFragment\n      }\n    }\n    footer1MenuItems: menuItems(where: {location: FOOTER_1}) {\n      nodes {\n        ...FooterMenuItemsFragment\n      }\n    }\n    footer2MenuItems: menuItems(where: {location: FOOTER_2}) {\n      nodes {\n        ...FooterMenuItemsFragment\n      }\n    }\n    footer3MenuItems: menuItems(where: {location: FOOTER_3}) {\n      nodes {\n        ...FooterMenuItemsFragment\n      }\n    }\n    footer4MenuItems: menuItems(where: {location: FOOTER_4}) {\n      nodes {\n        ...FooterMenuItemsFragment\n      }\n    }\n  }\n": types.GetShowcasesPageDocument,
    "\n  query GetArchive($uri: String!) {\n    nodeByUri(uri: $uri) {\n      archiveType: __typename\n      ... on Category {\n        name\n        posts {\n          nodes {\n            id\n            title\n            uri\n          }\n        }\n      }\n      ... on Tag {\n        name\n        posts {\n          nodes {\n            id\n            title\n            uri\n          }\n        }\n      }\n    }\n    generalSettings {\n      title\n      description\n    }\n    primaryMenuItems: menuItems(where: { location: PRIMARY }) {\n      nodes {\n        ...PrimaryMenuItemsFragment\n      }\n    }\n    secondaryMenuItems: menuItems(where: { location: SECONDARY }) {\n      nodes {\n        ...SecondaryMenuItemsFragment\n      }\n    }\n    footer1MenuItems: menuItems(where: {location: FOOTER_1}) {\n      nodes {\n        ...FooterMenuItemsFragment\n      }\n    }\n    footer2MenuItems: menuItems(where: {location: FOOTER_2}) {\n      nodes {\n        ...FooterMenuItemsFragment\n      }\n    }\n    footer3MenuItems: menuItems(where: {location: FOOTER_3}) {\n      nodes {\n        ...FooterMenuItemsFragment\n      }\n    }\n    footer4MenuItems: menuItems(where: {location: FOOTER_4}) {\n      nodes {\n        ...FooterMenuItemsFragment\n      }\n    }\n  }\n": types.GetArchiveDocument,
    "\n  query GetHomePage {\n    generalSettings {\n      title\n      description\n    }\n    primaryMenuItems: menuItems(where: {location: PRIMARY}) {\n      nodes {\n        ...PrimaryMenuItemsFragment\n      }\n    }\n    secondaryMenuItems: menuItems(where: {location: SECONDARY}) {\n      nodes {\n        ...SecondaryMenuItemsFragment\n      }\n    }\n    footer1MenuItems: menuItems(where: {location: FOOTER_1}) {\n      nodes {\n        ...FooterMenuItemsFragment\n      }\n    }\n    footer2MenuItems: menuItems(where: {location: FOOTER_2}) {\n      nodes {\n        ...FooterMenuItemsFragment\n      }\n    }\n    footer3MenuItems: menuItems(where: {location: FOOTER_3}) {\n      nodes {\n        ...FooterMenuItemsFragment\n      }\n    }\n    footer4MenuItems: menuItems(where: {location: FOOTER_4}) {\n      nodes {\n        ...FooterMenuItemsFragment\n      }\n    }\n  }\n": types.GetHomePageDocument,
    "\n  query GetPage($databaseId: ID!, $asPreview: Boolean = false) {\n    page(id: $databaseId, idType: DATABASE_ID, asPreview: $asPreview) {\n      title\n      content\n      seo {\n        metaDesc\n        opengraphImage {\n          sourceUrl\n        }\n      }\n    }\n    generalSettings {\n      title\n      description\n    }\n    primaryMenuItems: menuItems(where: {location: PRIMARY}) {\n      nodes {\n        ...PrimaryMenuItemsFragment\n      }\n    }\n    secondaryMenuItems: menuItems(where: {location: SECONDARY}) {\n      nodes {\n        ...SecondaryMenuItemsFragment\n      }\n    }\n    footer1MenuItems: menuItems(where: {location: FOOTER_1}) {\n      nodes {\n        ...FooterMenuItemsFragment\n      }\n    }\n    footer2MenuItems: menuItems(where: {location: FOOTER_2}) {\n      nodes {\n        ...FooterMenuItemsFragment\n      }\n    }\n    footer3MenuItems: menuItems(where: {location: FOOTER_3}) {\n      nodes {\n        ...FooterMenuItemsFragment\n      }\n    }\n    footer4MenuItems: menuItems(where: {location: FOOTER_4}) {\n      nodes {\n        ...FooterMenuItemsFragment\n      }\n    }\n  }\n": types.GetPageDocument,
    "\n  query GetPost($databaseId: ID!, $asPreview: Boolean = false) {\n    post(id: $databaseId, idType: DATABASE_ID, asPreview: $asPreview) {\n      seo {\n        metaDesc\n        opengraphImage {\n          sourceUrl\n        }\n      }\n      title\n      content\n      date\n      author {\n        node {\n          name\n        }\n      }\n      tags {\n        edges {\n          node {\n            name\n            uri\n          }\n        }\n      }\n      categories {\n        edges {\n          node {\n            name\n            uri\n          }\n        }\n      }\n      ...FeaturedImageFragment\n    }\n    generalSettings {\n      title\n      description\n    }\n    primaryMenuItems: menuItems(where: {location: PRIMARY}) {\n      nodes {\n        ...PrimaryMenuItemsFragment\n      }\n    }\n    secondaryMenuItems: menuItems(where: {location: SECONDARY}) {\n      nodes {\n        ...SecondaryMenuItemsFragment\n      }\n    }\n    footer1MenuItems: menuItems(where: {location: FOOTER_1}) {\n      nodes {\n        ...FooterMenuItemsFragment\n      }\n    }\n    footer2MenuItems: menuItems(where: {location: FOOTER_2}) {\n      nodes {\n        ...FooterMenuItemsFragment\n      }\n    }\n    footer3MenuItems: menuItems(where: {location: FOOTER_3}) {\n      nodes {\n        ...FooterMenuItemsFragment\n      }\n    }\n    footer4MenuItems: menuItems(where: {location: FOOTER_4}) {\n      nodes {\n        ...FooterMenuItemsFragment\n      }\n    }\n  }\n": types.GetPostDocument,
    "\n  query GetExplanation($databaseId: ID!, $asPreview: Boolean = false) {\n    explanation(id: $databaseId, idType: DATABASE_ID, asPreview: $asPreview) {\n      seo {\n        metaDesc\n        opengraphImage {\n          sourceUrl\n        }\n      }\n      title\n      content\n      ... on NodeWithEditorBlocks {\n        editorBlocks {\n          renderedHtml\n          ... on CoreCode {\n            name\n            attributes {\n              borderColor\n              backgroundColor\n              content\n              style\n              textColor\n              fontSize\n            }\n          }\n        }\n      }\n    }\n    generalSettings {\n      title\n      description\n    }\n    primaryMenuItems: menuItems(where: {location: PRIMARY}) {\n      nodes {\n        ...PrimaryMenuItemsFragment\n      }\n    }\n    secondaryMenuItems: menuItems(where: {location: SECONDARY}) {\n      nodes {\n        ...SecondaryMenuItemsFragment\n      }\n    }\n    docsSidebarMenuItems: menuItems(first: 100, where: {location: DOCS_SIDEBAR}) {\n      nodes {\n        ...DocsSidebarMenuItemsFragment\n      }\n    }\n    footer1MenuItems: menuItems(where: {location: FOOTER_1}) {\n      nodes {\n        ...FooterMenuItemsFragment\n      }\n    }\n    footer2MenuItems: menuItems(where: {location: FOOTER_2}) {\n      nodes {\n        ...FooterMenuItemsFragment\n      }\n    }\n    footer3MenuItems: menuItems(where: {location: FOOTER_3}) {\n      nodes {\n        ...FooterMenuItemsFragment\n      }\n    }\n    footer4MenuItems: menuItems(where: {location: FOOTER_4}) {\n      nodes {\n        ...FooterMenuItemsFragment\n      }\n    }\n  }\n": types.GetExplanationDocument,
    "\n  query GetHowToGuide($databaseId: ID!, $asPreview: Boolean = false) {\n    howToGuide(id: $databaseId, idType: DATABASE_ID, asPreview: $asPreview) {\n      seo {\n        metaDesc\n        opengraphImage {\n          sourceUrl\n        }\n      }\n      title\n      content\n      ... on NodeWithEditorBlocks {\n        editorBlocks {\n          renderedHtml\n          ... on CoreCode {\n            name\n            attributes {\n              borderColor\n              backgroundColor\n              content\n              style\n              textColor\n              fontSize\n            }\n          }\n        }\n      }\n    }\n    generalSettings {\n      title\n      description\n    }\n    primaryMenuItems: menuItems(where: {location: PRIMARY}) {\n      nodes {\n        ...PrimaryMenuItemsFragment\n      }\n    }\n    secondaryMenuItems: menuItems(where: {location: SECONDARY}) {\n      nodes {\n        ...SecondaryMenuItemsFragment\n      }\n    }\n    docsSidebarMenuItems: menuItems(first: 100, where: {location: DOCS_SIDEBAR}) {\n      nodes {\n        ...DocsSidebarMenuItemsFragment\n      }\n    }\n    footer1MenuItems: menuItems(where: {location: FOOTER_1}) {\n      nodes {\n        ...FooterMenuItemsFragment\n      }\n    }\n    footer2MenuItems: menuItems(where: {location: FOOTER_2}) {\n      nodes {\n        ...FooterMenuItemsFragment\n      }\n    }\n    footer3MenuItems: menuItems(where: {location: FOOTER_3}) {\n      nodes {\n        ...FooterMenuItemsFragment\n      }\n    }\n    footer4MenuItems: menuItems(where: {location: FOOTER_4}) {\n      nodes {\n        ...FooterMenuItemsFragment\n      }\n    }\n  }\n": types.GetHowToGuideDocument,
    "\n  query GetReference($databaseId: ID!, $asPreview: Boolean = false) {\n    reference(id: $databaseId, idType: DATABASE_ID, asPreview: $asPreview) {\n      seo {\n        metaDesc\n        opengraphImage {\n          sourceUrl\n        }\n      }\n      title\n      content\n      ... on NodeWithEditorBlocks {\n        editorBlocks {\n          renderedHtml\n          ... on CoreCode {\n            name\n            attributes {\n              borderColor\n              backgroundColor\n              content\n              style\n              textColor\n              fontSize\n            }\n          }\n        }\n      }\n    }\n    generalSettings {\n      title\n      description\n    }\n    primaryMenuItems: menuItems(where: {location: PRIMARY}) {\n      nodes {\n        ...PrimaryMenuItemsFragment\n      }\n    }\n    secondaryMenuItems: menuItems(where: {location: SECONDARY}) {\n      nodes {\n        ...SecondaryMenuItemsFragment\n      }\n    }\n    docsSidebarMenuItems: menuItems(first: 100, where: {location: DOCS_SIDEBAR}) {\n      nodes {\n        ...DocsSidebarMenuItemsFragment\n      }\n    }\n    footer1MenuItems: menuItems(where: {location: FOOTER_1}) {\n      nodes {\n        ...FooterMenuItemsFragment\n      }\n    }\n    footer2MenuItems: menuItems(where: {location: FOOTER_2}) {\n      nodes {\n        ...FooterMenuItemsFragment\n      }\n    }\n    footer3MenuItems: menuItems(where: {location: FOOTER_3}) {\n      nodes {\n        ...FooterMenuItemsFragment\n      }\n    }\n    footer4MenuItems: menuItems(where: {location: FOOTER_4}) {\n      nodes {\n        ...FooterMenuItemsFragment\n      }\n    }\n  }\n": types.GetReferenceDocument,
    "\n  query GetTutorial($databaseId: ID!, $asPreview: Boolean = false) {\n    tutorial(id: $databaseId, idType: DATABASE_ID, asPreview: $asPreview) {\n      seo {\n        metaDesc\n        opengraphImage {\n          sourceUrl\n        }\n      }\n      title\n      content\n      ... on NodeWithEditorBlocks {\n        editorBlocks {\n          renderedHtml\n          ... on CoreCode {\n            name\n            attributes {\n              borderColor\n              backgroundColor\n              content\n              style\n              textColor\n              fontSize\n            }\n          }\n        }\n      }\n    }\n    generalSettings {\n      title\n      description\n    }\n    primaryMenuItems: menuItems(where: {location: PRIMARY}) {\n      nodes {\n        ...PrimaryMenuItemsFragment\n      }\n    }\n    secondaryMenuItems: menuItems(where: {location: SECONDARY}) {\n      nodes {\n        ...SecondaryMenuItemsFragment\n      }\n    }\n    docsSidebarMenuItems: menuItems(first: 100, where: {location: DOCS_SIDEBAR}) {\n      nodes {\n        ...DocsSidebarMenuItemsFragment\n      }\n    }\n    footer1MenuItems: menuItems(where: {location: FOOTER_1}) {\n      nodes {\n        ...FooterMenuItemsFragment\n      }\n    }\n    footer2MenuItems: menuItems(where: {location: FOOTER_2}) {\n      nodes {\n        ...FooterMenuItemsFragment\n      }\n    }\n    footer3MenuItems: menuItems(where: {location: FOOTER_3}) {\n      nodes {\n        ...FooterMenuItemsFragment\n      }\n    }\n    footer4MenuItems: menuItems(where: {location: FOOTER_4}) {\n      nodes {\n        ...FooterMenuItemsFragment\n      }\n    }\n  }\n": types.GetTutorialDocument,
};

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = gql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function gql(source: string): unknown;

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    fragment DocsSidebarMenuItemsFragment on MenuItem {\n      id\n      uri\n      path\n      label\n      parentId\n      cssClasses\n      menu {\n        node {\n          name\n        }\n      }\n    }\n  "): (typeof documents)["\n    fragment DocsSidebarMenuItemsFragment on MenuItem {\n      id\n      uri\n      path\n      label\n      parentId\n      cssClasses\n      menu {\n        node {\n          name\n        }\n      }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    fragment FeaturedImageFragment on NodeWithFeaturedImage {\n      featuredImage {\n        node {\n          id\n          sourceUrl\n          altText\n          mediaDetails {\n            width\n            height\n          }\n        }\n      }\n    }\n  "): (typeof documents)["\n    fragment FeaturedImageFragment on NodeWithFeaturedImage {\n      featuredImage {\n        node {\n          id\n          sourceUrl\n          altText\n          mediaDetails {\n            width\n            height\n          }\n        }\n      }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n     fragment FooterMenuItemsFragment on MenuItem {\n       id\n       uri\n       path\n       label\n       parentId\n       cssClasses\n       target\n       menu {\n         node {\n           name\n         }\n       }\n     }\n  "): (typeof documents)["\n     fragment FooterMenuItemsFragment on MenuItem {\n       id\n       uri\n       path\n       label\n       parentId\n       cssClasses\n       target\n       menu {\n         node {\n           name\n         }\n       }\n     }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    fragment HeaderGeneralSettingsFragment on GeneralSettings {\n      title\n      description\n    }\n  "): (typeof documents)["\n    fragment HeaderGeneralSettingsFragment on GeneralSettings {\n      title\n      description\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    fragment PrimaryMenuItemsFragment on MenuItem {\n      id\n      uri\n      path\n      label\n      parentId\n      cssClasses\n      target\n      menu {\n        node {\n          name\n        }\n      }\n    }\n  "): (typeof documents)["\n    fragment PrimaryMenuItemsFragment on MenuItem {\n      id\n      uri\n      path\n      label\n      parentId\n      cssClasses\n      target\n      menu {\n        node {\n          name\n        }\n      }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    fragment SecondaryMenuItemsFragment on MenuItem {\n      id\n      uri\n      label\n      target\n    }\n  "): (typeof documents)["\n    fragment SecondaryMenuItemsFragment on MenuItem {\n      id\n      uri\n      label\n      target\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    fragment PostsItemFragment on Post {\n      id\n      date\n      uri\n      title\n      excerpt\n      author {\n        node {\n          name\n        }\n      }\n      tags {\n        nodes {\n          id\n          name\n          link\n        }\n      }\n    }\n  "): (typeof documents)["\n    fragment PostsItemFragment on Post {\n      id\n      date\n      uri\n      title\n      excerpt\n      author {\n        node {\n          name\n        }\n      }\n      tags {\n        nodes {\n          id\n          name\n          link\n        }\n      }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query SEARCH_RESULTS($searchTerm: String!) {\n    contentNodes(where: { search: $searchTerm }) {\n      edges {\n        node {\n          id\n          ... on NodeWithTitle {\n            title\n          }\n          uri\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query SEARCH_RESULTS($searchTerm: String!) {\n    contentNodes(where: { search: $searchTerm }) {\n      edges {\n        node {\n          id\n          ... on NodeWithTitle {\n            title\n          }\n          uri\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query SEARCH_RESULTS($searchTerm: String!) {\n    contentNodes(where: {search: $searchTerm}) {\n      edges {\n        node {\n          id\n          ... on NodeWithTitle {\n            title\n          }\n          uri\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query SEARCH_RESULTS($searchTerm: String!) {\n    contentNodes(where: {search: $searchTerm}) {\n      edges {\n        node {\n          id\n          ... on NodeWithTitle {\n            title\n          }\n          uri\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery Get404Page {\n    generalSettings {\n      title\n      description\n    }\n    primaryMenuItems: menuItems(where: {location: PRIMARY}) {\n      nodes {\n        ...PrimaryMenuItemsFragment\n      }\n    }\n    secondaryMenuItems: menuItems(where: {location: SECONDARY}) {\n      nodes {\n        ...SecondaryMenuItemsFragment\n      }\n    }\n    footer1MenuItems: menuItems(where: {location: FOOTER_1}) {\n      nodes {\n        ...FooterMenuItemsFragment\n      }\n    }\n    footer2MenuItems: menuItems(where: {location: FOOTER_2}) {\n      nodes {\n        ...FooterMenuItemsFragment\n      }\n    }\n    footer3MenuItems: menuItems(where: {location: FOOTER_3}) {\n      nodes {\n        ...FooterMenuItemsFragment\n      }\n    }\n    footer4MenuItems: menuItems(where: {location: FOOTER_4}) {\n      nodes {\n        ...FooterMenuItemsFragment\n      }\n    }\n  }\n"): (typeof documents)["\nquery Get404Page {\n    generalSettings {\n      title\n      description\n    }\n    primaryMenuItems: menuItems(where: {location: PRIMARY}) {\n      nodes {\n        ...PrimaryMenuItemsFragment\n      }\n    }\n    secondaryMenuItems: menuItems(where: {location: SECONDARY}) {\n      nodes {\n        ...SecondaryMenuItemsFragment\n      }\n    }\n    footer1MenuItems: menuItems(where: {location: FOOTER_1}) {\n      nodes {\n        ...FooterMenuItemsFragment\n      }\n    }\n    footer2MenuItems: menuItems(where: {location: FOOTER_2}) {\n      nodes {\n        ...FooterMenuItemsFragment\n      }\n    }\n    footer3MenuItems: menuItems(where: {location: FOOTER_3}) {\n      nodes {\n        ...FooterMenuItemsFragment\n      }\n    }\n    footer4MenuItems: menuItems(where: {location: FOOTER_4}) {\n      nodes {\n        ...FooterMenuItemsFragment\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetPostsPage {\n    posts(first: 100) {\n      edges {\n        node {\n          seo {\n            metaDesc\n            opengraphImage {\n              sourceUrl\n            }\n          }\n        }\n      }\n      nodes {\n        ...PostsItemFragment\n      }\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n    }\n    generalSettings {\n      title\n      description\n    }\n    primaryMenuItems: menuItems(where: { location: PRIMARY }) {\n      nodes {\n        ...PrimaryMenuItemsFragment\n      }\n    }\n    secondaryMenuItems: menuItems(where: { location: SECONDARY }) {\n      nodes {\n        ...SecondaryMenuItemsFragment\n      }\n    }\n    footer1MenuItems: menuItems(where: {location: FOOTER_1}) {\n      nodes {\n        ...FooterMenuItemsFragment\n      }\n    }\n    footer2MenuItems: menuItems(where: {location: FOOTER_2}) {\n      nodes {\n        ...FooterMenuItemsFragment\n      }\n    }\n    footer3MenuItems: menuItems(where: {location: FOOTER_3}) {\n      nodes {\n        ...FooterMenuItemsFragment\n      }\n    }\n    footer4MenuItems: menuItems(where: {location: FOOTER_4}) {\n      nodes {\n        ...FooterMenuItemsFragment\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetPostsPage {\n    posts(first: 100) {\n      edges {\n        node {\n          seo {\n            metaDesc\n            opengraphImage {\n              sourceUrl\n            }\n          }\n        }\n      }\n      nodes {\n        ...PostsItemFragment\n      }\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n    }\n    generalSettings {\n      title\n      description\n    }\n    primaryMenuItems: menuItems(where: { location: PRIMARY }) {\n      nodes {\n        ...PrimaryMenuItemsFragment\n      }\n    }\n    secondaryMenuItems: menuItems(where: { location: SECONDARY }) {\n      nodes {\n        ...SecondaryMenuItemsFragment\n      }\n    }\n    footer1MenuItems: menuItems(where: {location: FOOTER_1}) {\n      nodes {\n        ...FooterMenuItemsFragment\n      }\n    }\n    footer2MenuItems: menuItems(where: {location: FOOTER_2}) {\n      nodes {\n        ...FooterMenuItemsFragment\n      }\n    }\n    footer3MenuItems: menuItems(where: {location: FOOTER_3}) {\n      nodes {\n        ...FooterMenuItemsFragment\n      }\n    }\n    footer4MenuItems: menuItems(where: {location: FOOTER_4}) {\n      nodes {\n        ...FooterMenuItemsFragment\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetContactFormPage {\n    generalSettings {\n      title\n      description\n    }\n    primaryMenuItems: menuItems(where: { location: PRIMARY }) {\n      nodes {\n        ...PrimaryMenuItemsFragment\n      }\n    }\n    secondaryMenuItems: menuItems(where: { location: SECONDARY }) {\n      nodes {\n        ...SecondaryMenuItemsFragment\n      }\n    }\n    footer1MenuItems: menuItems(where: {location: FOOTER_1}) {\n      nodes {\n        ...FooterMenuItemsFragment\n      }\n    }\n    footer2MenuItems: menuItems(where: {location: FOOTER_2}) {\n      nodes {\n        ...FooterMenuItemsFragment\n      }\n    }\n    footer3MenuItems: menuItems(where: {location: FOOTER_3}) {\n      nodes {\n        ...FooterMenuItemsFragment\n      }\n    }\n    footer4MenuItems: menuItems(where: {location: FOOTER_4}) {\n      nodes {\n        ...FooterMenuItemsFragment\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetContactFormPage {\n    generalSettings {\n      title\n      description\n    }\n    primaryMenuItems: menuItems(where: { location: PRIMARY }) {\n      nodes {\n        ...PrimaryMenuItemsFragment\n      }\n    }\n    secondaryMenuItems: menuItems(where: { location: SECONDARY }) {\n      nodes {\n        ...SecondaryMenuItemsFragment\n      }\n    }\n    footer1MenuItems: menuItems(where: {location: FOOTER_1}) {\n      nodes {\n        ...FooterMenuItemsFragment\n      }\n    }\n    footer2MenuItems: menuItems(where: {location: FOOTER_2}) {\n      nodes {\n        ...FooterMenuItemsFragment\n      }\n    }\n    footer3MenuItems: menuItems(where: {location: FOOTER_3}) {\n      nodes {\n        ...FooterMenuItemsFragment\n      }\n    }\n    footer4MenuItems: menuItems(where: {location: FOOTER_4}) {\n      nodes {\n        ...FooterMenuItemsFragment\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetShowcasesPage {\n    showcases(first: 100) {\n      edges {\n        node {\n          seo {\n            metaDesc\n            opengraphImage {\n              sourceUrl\n            }\n          }\n        }\n      }\n      nodes {\n        id\n        title\n        showcaseFields {\n          externalUrlTitle\n          externalUrl\n        }\n        featuredImage {\n          node {\n            sourceUrl\n          }\n        }\n      }\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n    }\n    generalSettings {\n      title\n      description\n    }\n    primaryMenuItems: menuItems(where: { location: PRIMARY }) {\n      nodes {\n        ...PrimaryMenuItemsFragment\n      }\n    }\n    secondaryMenuItems: menuItems(where: { location: SECONDARY }) {\n      nodes {\n        ...SecondaryMenuItemsFragment\n      }\n    }\n    footer1MenuItems: menuItems(where: {location: FOOTER_1}) {\n      nodes {\n        ...FooterMenuItemsFragment\n      }\n    }\n    footer2MenuItems: menuItems(where: {location: FOOTER_2}) {\n      nodes {\n        ...FooterMenuItemsFragment\n      }\n    }\n    footer3MenuItems: menuItems(where: {location: FOOTER_3}) {\n      nodes {\n        ...FooterMenuItemsFragment\n      }\n    }\n    footer4MenuItems: menuItems(where: {location: FOOTER_4}) {\n      nodes {\n        ...FooterMenuItemsFragment\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetShowcasesPage {\n    showcases(first: 100) {\n      edges {\n        node {\n          seo {\n            metaDesc\n            opengraphImage {\n              sourceUrl\n            }\n          }\n        }\n      }\n      nodes {\n        id\n        title\n        showcaseFields {\n          externalUrlTitle\n          externalUrl\n        }\n        featuredImage {\n          node {\n            sourceUrl\n          }\n        }\n      }\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n    }\n    generalSettings {\n      title\n      description\n    }\n    primaryMenuItems: menuItems(where: { location: PRIMARY }) {\n      nodes {\n        ...PrimaryMenuItemsFragment\n      }\n    }\n    secondaryMenuItems: menuItems(where: { location: SECONDARY }) {\n      nodes {\n        ...SecondaryMenuItemsFragment\n      }\n    }\n    footer1MenuItems: menuItems(where: {location: FOOTER_1}) {\n      nodes {\n        ...FooterMenuItemsFragment\n      }\n    }\n    footer2MenuItems: menuItems(where: {location: FOOTER_2}) {\n      nodes {\n        ...FooterMenuItemsFragment\n      }\n    }\n    footer3MenuItems: menuItems(where: {location: FOOTER_3}) {\n      nodes {\n        ...FooterMenuItemsFragment\n      }\n    }\n    footer4MenuItems: menuItems(where: {location: FOOTER_4}) {\n      nodes {\n        ...FooterMenuItemsFragment\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetArchive($uri: String!) {\n    nodeByUri(uri: $uri) {\n      archiveType: __typename\n      ... on Category {\n        name\n        posts {\n          nodes {\n            id\n            title\n            uri\n          }\n        }\n      }\n      ... on Tag {\n        name\n        posts {\n          nodes {\n            id\n            title\n            uri\n          }\n        }\n      }\n    }\n    generalSettings {\n      title\n      description\n    }\n    primaryMenuItems: menuItems(where: { location: PRIMARY }) {\n      nodes {\n        ...PrimaryMenuItemsFragment\n      }\n    }\n    secondaryMenuItems: menuItems(where: { location: SECONDARY }) {\n      nodes {\n        ...SecondaryMenuItemsFragment\n      }\n    }\n    footer1MenuItems: menuItems(where: {location: FOOTER_1}) {\n      nodes {\n        ...FooterMenuItemsFragment\n      }\n    }\n    footer2MenuItems: menuItems(where: {location: FOOTER_2}) {\n      nodes {\n        ...FooterMenuItemsFragment\n      }\n    }\n    footer3MenuItems: menuItems(where: {location: FOOTER_3}) {\n      nodes {\n        ...FooterMenuItemsFragment\n      }\n    }\n    footer4MenuItems: menuItems(where: {location: FOOTER_4}) {\n      nodes {\n        ...FooterMenuItemsFragment\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetArchive($uri: String!) {\n    nodeByUri(uri: $uri) {\n      archiveType: __typename\n      ... on Category {\n        name\n        posts {\n          nodes {\n            id\n            title\n            uri\n          }\n        }\n      }\n      ... on Tag {\n        name\n        posts {\n          nodes {\n            id\n            title\n            uri\n          }\n        }\n      }\n    }\n    generalSettings {\n      title\n      description\n    }\n    primaryMenuItems: menuItems(where: { location: PRIMARY }) {\n      nodes {\n        ...PrimaryMenuItemsFragment\n      }\n    }\n    secondaryMenuItems: menuItems(where: { location: SECONDARY }) {\n      nodes {\n        ...SecondaryMenuItemsFragment\n      }\n    }\n    footer1MenuItems: menuItems(where: {location: FOOTER_1}) {\n      nodes {\n        ...FooterMenuItemsFragment\n      }\n    }\n    footer2MenuItems: menuItems(where: {location: FOOTER_2}) {\n      nodes {\n        ...FooterMenuItemsFragment\n      }\n    }\n    footer3MenuItems: menuItems(where: {location: FOOTER_3}) {\n      nodes {\n        ...FooterMenuItemsFragment\n      }\n    }\n    footer4MenuItems: menuItems(where: {location: FOOTER_4}) {\n      nodes {\n        ...FooterMenuItemsFragment\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetHomePage {\n    generalSettings {\n      title\n      description\n    }\n    primaryMenuItems: menuItems(where: {location: PRIMARY}) {\n      nodes {\n        ...PrimaryMenuItemsFragment\n      }\n    }\n    secondaryMenuItems: menuItems(where: {location: SECONDARY}) {\n      nodes {\n        ...SecondaryMenuItemsFragment\n      }\n    }\n    footer1MenuItems: menuItems(where: {location: FOOTER_1}) {\n      nodes {\n        ...FooterMenuItemsFragment\n      }\n    }\n    footer2MenuItems: menuItems(where: {location: FOOTER_2}) {\n      nodes {\n        ...FooterMenuItemsFragment\n      }\n    }\n    footer3MenuItems: menuItems(where: {location: FOOTER_3}) {\n      nodes {\n        ...FooterMenuItemsFragment\n      }\n    }\n    footer4MenuItems: menuItems(where: {location: FOOTER_4}) {\n      nodes {\n        ...FooterMenuItemsFragment\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetHomePage {\n    generalSettings {\n      title\n      description\n    }\n    primaryMenuItems: menuItems(where: {location: PRIMARY}) {\n      nodes {\n        ...PrimaryMenuItemsFragment\n      }\n    }\n    secondaryMenuItems: menuItems(where: {location: SECONDARY}) {\n      nodes {\n        ...SecondaryMenuItemsFragment\n      }\n    }\n    footer1MenuItems: menuItems(where: {location: FOOTER_1}) {\n      nodes {\n        ...FooterMenuItemsFragment\n      }\n    }\n    footer2MenuItems: menuItems(where: {location: FOOTER_2}) {\n      nodes {\n        ...FooterMenuItemsFragment\n      }\n    }\n    footer3MenuItems: menuItems(where: {location: FOOTER_3}) {\n      nodes {\n        ...FooterMenuItemsFragment\n      }\n    }\n    footer4MenuItems: menuItems(where: {location: FOOTER_4}) {\n      nodes {\n        ...FooterMenuItemsFragment\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetPage($databaseId: ID!, $asPreview: Boolean = false) {\n    page(id: $databaseId, idType: DATABASE_ID, asPreview: $asPreview) {\n      title\n      content\n      seo {\n        metaDesc\n        opengraphImage {\n          sourceUrl\n        }\n      }\n    }\n    generalSettings {\n      title\n      description\n    }\n    primaryMenuItems: menuItems(where: {location: PRIMARY}) {\n      nodes {\n        ...PrimaryMenuItemsFragment\n      }\n    }\n    secondaryMenuItems: menuItems(where: {location: SECONDARY}) {\n      nodes {\n        ...SecondaryMenuItemsFragment\n      }\n    }\n    footer1MenuItems: menuItems(where: {location: FOOTER_1}) {\n      nodes {\n        ...FooterMenuItemsFragment\n      }\n    }\n    footer2MenuItems: menuItems(where: {location: FOOTER_2}) {\n      nodes {\n        ...FooterMenuItemsFragment\n      }\n    }\n    footer3MenuItems: menuItems(where: {location: FOOTER_3}) {\n      nodes {\n        ...FooterMenuItemsFragment\n      }\n    }\n    footer4MenuItems: menuItems(where: {location: FOOTER_4}) {\n      nodes {\n        ...FooterMenuItemsFragment\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetPage($databaseId: ID!, $asPreview: Boolean = false) {\n    page(id: $databaseId, idType: DATABASE_ID, asPreview: $asPreview) {\n      title\n      content\n      seo {\n        metaDesc\n        opengraphImage {\n          sourceUrl\n        }\n      }\n    }\n    generalSettings {\n      title\n      description\n    }\n    primaryMenuItems: menuItems(where: {location: PRIMARY}) {\n      nodes {\n        ...PrimaryMenuItemsFragment\n      }\n    }\n    secondaryMenuItems: menuItems(where: {location: SECONDARY}) {\n      nodes {\n        ...SecondaryMenuItemsFragment\n      }\n    }\n    footer1MenuItems: menuItems(where: {location: FOOTER_1}) {\n      nodes {\n        ...FooterMenuItemsFragment\n      }\n    }\n    footer2MenuItems: menuItems(where: {location: FOOTER_2}) {\n      nodes {\n        ...FooterMenuItemsFragment\n      }\n    }\n    footer3MenuItems: menuItems(where: {location: FOOTER_3}) {\n      nodes {\n        ...FooterMenuItemsFragment\n      }\n    }\n    footer4MenuItems: menuItems(where: {location: FOOTER_4}) {\n      nodes {\n        ...FooterMenuItemsFragment\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetPost($databaseId: ID!, $asPreview: Boolean = false) {\n    post(id: $databaseId, idType: DATABASE_ID, asPreview: $asPreview) {\n      seo {\n        metaDesc\n        opengraphImage {\n          sourceUrl\n        }\n      }\n      title\n      content\n      date\n      author {\n        node {\n          name\n        }\n      }\n      tags {\n        edges {\n          node {\n            name\n            uri\n          }\n        }\n      }\n      categories {\n        edges {\n          node {\n            name\n            uri\n          }\n        }\n      }\n      ...FeaturedImageFragment\n    }\n    generalSettings {\n      title\n      description\n    }\n    primaryMenuItems: menuItems(where: {location: PRIMARY}) {\n      nodes {\n        ...PrimaryMenuItemsFragment\n      }\n    }\n    secondaryMenuItems: menuItems(where: {location: SECONDARY}) {\n      nodes {\n        ...SecondaryMenuItemsFragment\n      }\n    }\n    footer1MenuItems: menuItems(where: {location: FOOTER_1}) {\n      nodes {\n        ...FooterMenuItemsFragment\n      }\n    }\n    footer2MenuItems: menuItems(where: {location: FOOTER_2}) {\n      nodes {\n        ...FooterMenuItemsFragment\n      }\n    }\n    footer3MenuItems: menuItems(where: {location: FOOTER_3}) {\n      nodes {\n        ...FooterMenuItemsFragment\n      }\n    }\n    footer4MenuItems: menuItems(where: {location: FOOTER_4}) {\n      nodes {\n        ...FooterMenuItemsFragment\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetPost($databaseId: ID!, $asPreview: Boolean = false) {\n    post(id: $databaseId, idType: DATABASE_ID, asPreview: $asPreview) {\n      seo {\n        metaDesc\n        opengraphImage {\n          sourceUrl\n        }\n      }\n      title\n      content\n      date\n      author {\n        node {\n          name\n        }\n      }\n      tags {\n        edges {\n          node {\n            name\n            uri\n          }\n        }\n      }\n      categories {\n        edges {\n          node {\n            name\n            uri\n          }\n        }\n      }\n      ...FeaturedImageFragment\n    }\n    generalSettings {\n      title\n      description\n    }\n    primaryMenuItems: menuItems(where: {location: PRIMARY}) {\n      nodes {\n        ...PrimaryMenuItemsFragment\n      }\n    }\n    secondaryMenuItems: menuItems(where: {location: SECONDARY}) {\n      nodes {\n        ...SecondaryMenuItemsFragment\n      }\n    }\n    footer1MenuItems: menuItems(where: {location: FOOTER_1}) {\n      nodes {\n        ...FooterMenuItemsFragment\n      }\n    }\n    footer2MenuItems: menuItems(where: {location: FOOTER_2}) {\n      nodes {\n        ...FooterMenuItemsFragment\n      }\n    }\n    footer3MenuItems: menuItems(where: {location: FOOTER_3}) {\n      nodes {\n        ...FooterMenuItemsFragment\n      }\n    }\n    footer4MenuItems: menuItems(where: {location: FOOTER_4}) {\n      nodes {\n        ...FooterMenuItemsFragment\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetExplanation($databaseId: ID!, $asPreview: Boolean = false) {\n    explanation(id: $databaseId, idType: DATABASE_ID, asPreview: $asPreview) {\n      seo {\n        metaDesc\n        opengraphImage {\n          sourceUrl\n        }\n      }\n      title\n      content\n      ... on NodeWithEditorBlocks {\n        editorBlocks {\n          renderedHtml\n          ... on CoreCode {\n            name\n            attributes {\n              borderColor\n              backgroundColor\n              content\n              style\n              textColor\n              fontSize\n            }\n          }\n        }\n      }\n    }\n    generalSettings {\n      title\n      description\n    }\n    primaryMenuItems: menuItems(where: {location: PRIMARY}) {\n      nodes {\n        ...PrimaryMenuItemsFragment\n      }\n    }\n    secondaryMenuItems: menuItems(where: {location: SECONDARY}) {\n      nodes {\n        ...SecondaryMenuItemsFragment\n      }\n    }\n    docsSidebarMenuItems: menuItems(first: 100, where: {location: DOCS_SIDEBAR}) {\n      nodes {\n        ...DocsSidebarMenuItemsFragment\n      }\n    }\n    footer1MenuItems: menuItems(where: {location: FOOTER_1}) {\n      nodes {\n        ...FooterMenuItemsFragment\n      }\n    }\n    footer2MenuItems: menuItems(where: {location: FOOTER_2}) {\n      nodes {\n        ...FooterMenuItemsFragment\n      }\n    }\n    footer3MenuItems: menuItems(where: {location: FOOTER_3}) {\n      nodes {\n        ...FooterMenuItemsFragment\n      }\n    }\n    footer4MenuItems: menuItems(where: {location: FOOTER_4}) {\n      nodes {\n        ...FooterMenuItemsFragment\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetExplanation($databaseId: ID!, $asPreview: Boolean = false) {\n    explanation(id: $databaseId, idType: DATABASE_ID, asPreview: $asPreview) {\n      seo {\n        metaDesc\n        opengraphImage {\n          sourceUrl\n        }\n      }\n      title\n      content\n      ... on NodeWithEditorBlocks {\n        editorBlocks {\n          renderedHtml\n          ... on CoreCode {\n            name\n            attributes {\n              borderColor\n              backgroundColor\n              content\n              style\n              textColor\n              fontSize\n            }\n          }\n        }\n      }\n    }\n    generalSettings {\n      title\n      description\n    }\n    primaryMenuItems: menuItems(where: {location: PRIMARY}) {\n      nodes {\n        ...PrimaryMenuItemsFragment\n      }\n    }\n    secondaryMenuItems: menuItems(where: {location: SECONDARY}) {\n      nodes {\n        ...SecondaryMenuItemsFragment\n      }\n    }\n    docsSidebarMenuItems: menuItems(first: 100, where: {location: DOCS_SIDEBAR}) {\n      nodes {\n        ...DocsSidebarMenuItemsFragment\n      }\n    }\n    footer1MenuItems: menuItems(where: {location: FOOTER_1}) {\n      nodes {\n        ...FooterMenuItemsFragment\n      }\n    }\n    footer2MenuItems: menuItems(where: {location: FOOTER_2}) {\n      nodes {\n        ...FooterMenuItemsFragment\n      }\n    }\n    footer3MenuItems: menuItems(where: {location: FOOTER_3}) {\n      nodes {\n        ...FooterMenuItemsFragment\n      }\n    }\n    footer4MenuItems: menuItems(where: {location: FOOTER_4}) {\n      nodes {\n        ...FooterMenuItemsFragment\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetHowToGuide($databaseId: ID!, $asPreview: Boolean = false) {\n    howToGuide(id: $databaseId, idType: DATABASE_ID, asPreview: $asPreview) {\n      seo {\n        metaDesc\n        opengraphImage {\n          sourceUrl\n        }\n      }\n      title\n      content\n      ... on NodeWithEditorBlocks {\n        editorBlocks {\n          renderedHtml\n          ... on CoreCode {\n            name\n            attributes {\n              borderColor\n              backgroundColor\n              content\n              style\n              textColor\n              fontSize\n            }\n          }\n        }\n      }\n    }\n    generalSettings {\n      title\n      description\n    }\n    primaryMenuItems: menuItems(where: {location: PRIMARY}) {\n      nodes {\n        ...PrimaryMenuItemsFragment\n      }\n    }\n    secondaryMenuItems: menuItems(where: {location: SECONDARY}) {\n      nodes {\n        ...SecondaryMenuItemsFragment\n      }\n    }\n    docsSidebarMenuItems: menuItems(first: 100, where: {location: DOCS_SIDEBAR}) {\n      nodes {\n        ...DocsSidebarMenuItemsFragment\n      }\n    }\n    footer1MenuItems: menuItems(where: {location: FOOTER_1}) {\n      nodes {\n        ...FooterMenuItemsFragment\n      }\n    }\n    footer2MenuItems: menuItems(where: {location: FOOTER_2}) {\n      nodes {\n        ...FooterMenuItemsFragment\n      }\n    }\n    footer3MenuItems: menuItems(where: {location: FOOTER_3}) {\n      nodes {\n        ...FooterMenuItemsFragment\n      }\n    }\n    footer4MenuItems: menuItems(where: {location: FOOTER_4}) {\n      nodes {\n        ...FooterMenuItemsFragment\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetHowToGuide($databaseId: ID!, $asPreview: Boolean = false) {\n    howToGuide(id: $databaseId, idType: DATABASE_ID, asPreview: $asPreview) {\n      seo {\n        metaDesc\n        opengraphImage {\n          sourceUrl\n        }\n      }\n      title\n      content\n      ... on NodeWithEditorBlocks {\n        editorBlocks {\n          renderedHtml\n          ... on CoreCode {\n            name\n            attributes {\n              borderColor\n              backgroundColor\n              content\n              style\n              textColor\n              fontSize\n            }\n          }\n        }\n      }\n    }\n    generalSettings {\n      title\n      description\n    }\n    primaryMenuItems: menuItems(where: {location: PRIMARY}) {\n      nodes {\n        ...PrimaryMenuItemsFragment\n      }\n    }\n    secondaryMenuItems: menuItems(where: {location: SECONDARY}) {\n      nodes {\n        ...SecondaryMenuItemsFragment\n      }\n    }\n    docsSidebarMenuItems: menuItems(first: 100, where: {location: DOCS_SIDEBAR}) {\n      nodes {\n        ...DocsSidebarMenuItemsFragment\n      }\n    }\n    footer1MenuItems: menuItems(where: {location: FOOTER_1}) {\n      nodes {\n        ...FooterMenuItemsFragment\n      }\n    }\n    footer2MenuItems: menuItems(where: {location: FOOTER_2}) {\n      nodes {\n        ...FooterMenuItemsFragment\n      }\n    }\n    footer3MenuItems: menuItems(where: {location: FOOTER_3}) {\n      nodes {\n        ...FooterMenuItemsFragment\n      }\n    }\n    footer4MenuItems: menuItems(where: {location: FOOTER_4}) {\n      nodes {\n        ...FooterMenuItemsFragment\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetReference($databaseId: ID!, $asPreview: Boolean = false) {\n    reference(id: $databaseId, idType: DATABASE_ID, asPreview: $asPreview) {\n      seo {\n        metaDesc\n        opengraphImage {\n          sourceUrl\n        }\n      }\n      title\n      content\n      ... on NodeWithEditorBlocks {\n        editorBlocks {\n          renderedHtml\n          ... on CoreCode {\n            name\n            attributes {\n              borderColor\n              backgroundColor\n              content\n              style\n              textColor\n              fontSize\n            }\n          }\n        }\n      }\n    }\n    generalSettings {\n      title\n      description\n    }\n    primaryMenuItems: menuItems(where: {location: PRIMARY}) {\n      nodes {\n        ...PrimaryMenuItemsFragment\n      }\n    }\n    secondaryMenuItems: menuItems(where: {location: SECONDARY}) {\n      nodes {\n        ...SecondaryMenuItemsFragment\n      }\n    }\n    docsSidebarMenuItems: menuItems(first: 100, where: {location: DOCS_SIDEBAR}) {\n      nodes {\n        ...DocsSidebarMenuItemsFragment\n      }\n    }\n    footer1MenuItems: menuItems(where: {location: FOOTER_1}) {\n      nodes {\n        ...FooterMenuItemsFragment\n      }\n    }\n    footer2MenuItems: menuItems(where: {location: FOOTER_2}) {\n      nodes {\n        ...FooterMenuItemsFragment\n      }\n    }\n    footer3MenuItems: menuItems(where: {location: FOOTER_3}) {\n      nodes {\n        ...FooterMenuItemsFragment\n      }\n    }\n    footer4MenuItems: menuItems(where: {location: FOOTER_4}) {\n      nodes {\n        ...FooterMenuItemsFragment\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetReference($databaseId: ID!, $asPreview: Boolean = false) {\n    reference(id: $databaseId, idType: DATABASE_ID, asPreview: $asPreview) {\n      seo {\n        metaDesc\n        opengraphImage {\n          sourceUrl\n        }\n      }\n      title\n      content\n      ... on NodeWithEditorBlocks {\n        editorBlocks {\n          renderedHtml\n          ... on CoreCode {\n            name\n            attributes {\n              borderColor\n              backgroundColor\n              content\n              style\n              textColor\n              fontSize\n            }\n          }\n        }\n      }\n    }\n    generalSettings {\n      title\n      description\n    }\n    primaryMenuItems: menuItems(where: {location: PRIMARY}) {\n      nodes {\n        ...PrimaryMenuItemsFragment\n      }\n    }\n    secondaryMenuItems: menuItems(where: {location: SECONDARY}) {\n      nodes {\n        ...SecondaryMenuItemsFragment\n      }\n    }\n    docsSidebarMenuItems: menuItems(first: 100, where: {location: DOCS_SIDEBAR}) {\n      nodes {\n        ...DocsSidebarMenuItemsFragment\n      }\n    }\n    footer1MenuItems: menuItems(where: {location: FOOTER_1}) {\n      nodes {\n        ...FooterMenuItemsFragment\n      }\n    }\n    footer2MenuItems: menuItems(where: {location: FOOTER_2}) {\n      nodes {\n        ...FooterMenuItemsFragment\n      }\n    }\n    footer3MenuItems: menuItems(where: {location: FOOTER_3}) {\n      nodes {\n        ...FooterMenuItemsFragment\n      }\n    }\n    footer4MenuItems: menuItems(where: {location: FOOTER_4}) {\n      nodes {\n        ...FooterMenuItemsFragment\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetTutorial($databaseId: ID!, $asPreview: Boolean = false) {\n    tutorial(id: $databaseId, idType: DATABASE_ID, asPreview: $asPreview) {\n      seo {\n        metaDesc\n        opengraphImage {\n          sourceUrl\n        }\n      }\n      title\n      content\n      ... on NodeWithEditorBlocks {\n        editorBlocks {\n          renderedHtml\n          ... on CoreCode {\n            name\n            attributes {\n              borderColor\n              backgroundColor\n              content\n              style\n              textColor\n              fontSize\n            }\n          }\n        }\n      }\n    }\n    generalSettings {\n      title\n      description\n    }\n    primaryMenuItems: menuItems(where: {location: PRIMARY}) {\n      nodes {\n        ...PrimaryMenuItemsFragment\n      }\n    }\n    secondaryMenuItems: menuItems(where: {location: SECONDARY}) {\n      nodes {\n        ...SecondaryMenuItemsFragment\n      }\n    }\n    docsSidebarMenuItems: menuItems(first: 100, where: {location: DOCS_SIDEBAR}) {\n      nodes {\n        ...DocsSidebarMenuItemsFragment\n      }\n    }\n    footer1MenuItems: menuItems(where: {location: FOOTER_1}) {\n      nodes {\n        ...FooterMenuItemsFragment\n      }\n    }\n    footer2MenuItems: menuItems(where: {location: FOOTER_2}) {\n      nodes {\n        ...FooterMenuItemsFragment\n      }\n    }\n    footer3MenuItems: menuItems(where: {location: FOOTER_3}) {\n      nodes {\n        ...FooterMenuItemsFragment\n      }\n    }\n    footer4MenuItems: menuItems(where: {location: FOOTER_4}) {\n      nodes {\n        ...FooterMenuItemsFragment\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetTutorial($databaseId: ID!, $asPreview: Boolean = false) {\n    tutorial(id: $databaseId, idType: DATABASE_ID, asPreview: $asPreview) {\n      seo {\n        metaDesc\n        opengraphImage {\n          sourceUrl\n        }\n      }\n      title\n      content\n      ... on NodeWithEditorBlocks {\n        editorBlocks {\n          renderedHtml\n          ... on CoreCode {\n            name\n            attributes {\n              borderColor\n              backgroundColor\n              content\n              style\n              textColor\n              fontSize\n            }\n          }\n        }\n      }\n    }\n    generalSettings {\n      title\n      description\n    }\n    primaryMenuItems: menuItems(where: {location: PRIMARY}) {\n      nodes {\n        ...PrimaryMenuItemsFragment\n      }\n    }\n    secondaryMenuItems: menuItems(where: {location: SECONDARY}) {\n      nodes {\n        ...SecondaryMenuItemsFragment\n      }\n    }\n    docsSidebarMenuItems: menuItems(first: 100, where: {location: DOCS_SIDEBAR}) {\n      nodes {\n        ...DocsSidebarMenuItemsFragment\n      }\n    }\n    footer1MenuItems: menuItems(where: {location: FOOTER_1}) {\n      nodes {\n        ...FooterMenuItemsFragment\n      }\n    }\n    footer2MenuItems: menuItems(where: {location: FOOTER_2}) {\n      nodes {\n        ...FooterMenuItemsFragment\n      }\n    }\n    footer3MenuItems: menuItems(where: {location: FOOTER_3}) {\n      nodes {\n        ...FooterMenuItemsFragment\n      }\n    }\n    footer4MenuItems: menuItems(where: {location: FOOTER_4}) {\n      nodes {\n        ...FooterMenuItemsFragment\n      }\n    }\n  }\n"];

export function gql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;